% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spectral.R
\name{spectral}
\alias{spectral}
\title{Create an `AdjacencyMatrix` object containing assays of adjacency 
matrices from spectral similarity methods}
\usage{
spectral(x, am_structural, methods = c("ndotproduct"), ...)
}
\arguments{
\item{x}{`Spectra` object that contains a unique "id" (see `spectraVariables()`), 
matching to the row-/colnames of the structural `AdjacencyMatrix` and storing
important information of MS2 data (i.e. mz and intensity).}

\item{am_structural}{`AdjacencyMatrix` of type "structural" that was created using matching MS1 
data of the same data set.}

\item{methods}{`character` vector containing the methods that will be used. All methods can 
be used that are already implemented in the `RforMassSpectrometry` 
infrastructure, e.g. (`"ndotproduct"`(default), `"gnps"`). 
`methods` are then forwarded to `FUN` in `Spectra::compareSpectra()`.}

\item{...}{parameters passed to the functions  `combineSpectra` from the `Spectra` 
package (e.g. `MAPFUN`, `tolerance`, `ppm`, `type`, ...).}
}
\value{
`AdjacencyMatrix` of type "spectral" containing the respective 
adjacency matrices in the `assay` slot as specified by `methods`
}
\description{
The function `spectral` infers adjacency matrix topologies from
spectral similarity methods and returns matrices of these networks in an
`AdjacencyMatrix` object. 
The function includes functionality to calculate adjacency matrices based on 
spectral similarity methods included in the `Spectra` package.
It uses a `Spectra`-object, storing the ms2 information and using a previously 
created `AdjacencyMatrix` object from the type "structural" in order to 
perform the mapping on the ms1 features. 
The function returns an `AdjacencyMatrix` object of adjacency matrices that 
are defined by `methods`.
}
\details{
The function `spectral` includes functionality to calculate adjacency
matrices based on different spectral similarity measures provided by the 
`RforMassSpectrometry` infrastructure. 
`spectral` calls the different functions (`FUN` parameter in 
`Spectra::compareSpectra()`) as specified by `methods`. The default is the 
normalized dotproduct `"ndotproduct"`. Moreover, different parameters (e.g. 
`MAPFUN`, `tolerance`, `ppm`, `type`, ...) of the function 
`Spectra::compareSpectra()` are forwarded by `...`. `spectral` will create 
adjacency matrices using the specified methods and will return an 
`AdjacencyMatrix` containing the weighted adjacency matrices in the `assays` 
slot.

It is very important that features IDs in the MS1 data (i.e. row/colnames of 
`am_structural`) are matching to the IDs of the respective MS2 data (i.e. 
`"id"` in the `spectraVariables()`). Also, the `Spectra` object `x` is 
required to have unique `"id"`s, meaning on representative spectrum per 
feature. If features store multiple spectra, spectra consolidation has to be 
performed first (e.g. using the function `Spectra::combineSpectra`).
}
\examples{
## 1. load ms1 data
## 2. load ms2 data as spectra object 
## 3. perform structural()
## 4. perform spectral()

}
\author{
Liesa Salzer
}
